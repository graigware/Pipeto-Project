diff --git a/Pipeto/Pipeto/src/utils.c b/Pipeto/Pipeto/src/utils.c
index 19438a3..3fecb1e 100644
--- a/Pipeto/Pipeto/src/utils.c
+++ b/Pipeto/Pipeto/src/utils.c
@@ -4,46 +4,105 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <sys/types.h>
+#include "pipeto.h"
 
-void write_color(int fd, const char *color, const char *str) {
-  if (fd < 0 || !color || !str)
-      return;
-  dprintf(fd, "%s%s%s", color, str, CRESET);
+void write_color(int fd, const char *color, const char *str)
+{
+    if (fd < 0 || !color || !str)
+        return;
+    dprintf(fd, "%s%s%s", color, str, CRESET);
 }
 
-void load_pipetorc() {
-    FILE *rc_file;
-    char line[1024];
-    char cmd[1100];
-
-    rc_file = fopen(".pipetorc", "r");
-    if (!rc_file) {
-        char *home = getenv("HOME");
-        if (home) {
-          char home_rc[1024];
-          snprintf(home_rc, sizeof(home_rc), "%s/.pipetorc", home);
-          rc_file = fopen(home_rc, "r");
-        }
-      }
+commands command_table[] = {
+    {"init_reactor", init_reactor},
+    {"check_reactor_status", check_reactor_status},
+    {"activate_emergency_protocols", activate_emergency_protocols},
+    {"simulate_meltdown", simulate_meltdown},
+    {"check_cooling_pressure", check_cooling_pressure},
+    {"send_status_report", send_status_report},
+    {"monitor_radiation_levels", monitor_radiation_levels},
+    {"set_reactor_power", set_reactor_power},
+    {"run_diagnostic", run_diagnostic},
+    {"enable_remote_access", enable_remote_access},
+    {"quit", quit},
+    {"help", help},
+    {"load_fuel_rods", load_fuel_rods},
+    {"log_system_event", log_system_event},
+    {"history", show_history},
+    {"load_config", load_config},
+    {"configure_cooling_system", configure_cooling_system},
+    {NULL, NULL}
+};
 
-    if (!rc_file) {
-      return;
+static int execute_command(char *cmd)
+{
+    for (int i = 0; command_table[i].name != NULL; i++) {
+        if (strcmp(cmd, command_table[i].name) == 0) {
+            command_table[i].func(cmd);
+            return 0;
+        }
     }
+    fprintf(stderr, "Unknown command: '%s'\n", cmd);
+    return -1;
+}
 
-    while (fgets(line, sizeof(line), rc_file)) {
-        if (line[0] == '#' || line[0] == '\n') {
-          continue;
-        }
-        line[strcspn(line, "\n")] = '\0';
-
-        if (strncmp(line, "exec ", 5) == 0) {
-          snprintf(cmd, sizeof(cmd), "%s", line + 5);
-          system(cmd);
-        } else {
-	  printf("Pipeto command: ");
-	  printf(line);
-	  printf("\n");
-        }
+static FILE *open_rc_file(void)
+{
+    FILE *rc_file = fopen(".pipetorc", "r");
+    const char *home = NULL;
+    char *home_rc = NULL;
+    int len = 0;
+
+    if (rc_file)
+        return rc_file;
+    home = getenv("HOME");
+    if (home) {
+        len = strlen(home) + strlen("/.pipetorc") + 1;
+        home_rc = malloc(len);
+        if (!home_rc)
+            return NULL;
+        snprintf(home_rc, len, "%s/.pipetorc", home);
+        rc_file = fopen(home_rc, "r");
+        free(home_rc);
     }
+    return rc_file;
+}
+
+static void process_line(const char *line)
+{
+    char *clean_line = NULL;
+    char *cmd = NULL;
+
+    if (line[0] == '#' || line[0] == '\n')
+        return;
+    clean_line = strdup(line);
+    if (!clean_line)
+        return;
+    clean_line[strcspn(clean_line, "\n")] = '\0';
+    if (strncmp(clean_line, "exec ", 5) == 0) {
+        cmd = clean_line + 5;
+        execute_command(cmd);
+    } else
+        printf("Pipeto command: %s\n", clean_line);
+    free(clean_line);
+}
+
+static void process_rc_file(FILE *rc_file)
+{
+    char *line = NULL;
+    int len = 0;
+
+    while (getline(&line, &len, rc_file) != -1)
+        process_line(line);
+    free(line);
+}
+
+void load_pipetorc(void)
+{
+    FILE *rc_file = open_rc_file();
+
+    if (!rc_file)
+        return;
+    process_rc_file(rc_file);
     fclose(rc_file);
 }
