diff --git a/libpipeto/turbine_remote_access.c b/libpipeto/turbine_remote_access.c
index 9bbbde4..9c3ff5e 100644
--- a/libpipeto/turbine_remote_access.c
+++ b/libpipeto/turbine_remote_access.c
@@ -3,34 +3,60 @@
 #include <string.h>
 #include <stdio.h>
 
-void turbine_remote_access(void)
+static void encrypted_flag(char *accessToken)
+{
+    unsigned char enc_flag[] = {0xc8, 0xbc, 0x5b, 0xcf, 0xa9, 0x36, 0xa1,
+        0xa2, 0x1f, 0x68, 0x5d, 0xdd, 0xe4, 0xe3, 0xb9, 0xce};
+    unsigned char keys[] = {0xb3, 0xfd, 0x18, 0x8c, 0xec, 0x65, 0xf2, 0xfd,
+        0x58, 0x3a, 0x1c, 0x93, 0xb0, 0xa6, 0xfd};
+    char decrypted[16];
 
+    for (unsigned int i = 0; i < sizeof(enc_flag); i++)
+        accessToken[i] = enc_flag[i] ^ keys[i];
+    accessToken[15] = '\0';
+    printf("%s\n", accessToken);
+}
+
+static int create_and_write_tempfile(char *path, int *fd)
 {
-  size_t __n;
-  char local_48 [32];
-  char local_28 [28];
-  int local_c;
-  
-  builtin_strncpy(local_28,"Data/remote_accessXXXXXX",0x19);
-  local_c = mkstemp(local_28);
-  if (local_c == -1) {
-    puts("Error: Unable to create temporary file.");
-  }
-  else {
-    printf("Temporary file created: %s\n",local_28);
-    builtin_strncpy(local_48,"{ACCESS_GRANTED}",0x11);
-    __n = strlen(local_48);
-    write(local_c,local_48,__n);
-    close(local_c);
-    puts("Enabling remote access...");
-    sleep(5);
-    local_c = open(local_28,0);
-    if (local_c == -1) {
-      puts("Error: Temporary file was tampered with or deleted.") ;
+    char accessToken[16];
+    encrypted_flag(accessToken);
+    size_t messageLength = strlen(accessToken);
+
+    *fd = mkstemp(path);
+    if (*fd == -1) {
+        puts("Error: Unable to create temporary file.");
+        return -1;
     }
-    else {
-      unlink(local_28);
+    unlink(path);
+    if (write(*fd, accessToken, messageLength) == -1) {
+        puts("Error: Failed to write to temporary file.");
+        close(*fd);
+        return -1;
     }
-  }
-  return;
+    return 0;
+}
+
+static void read_and_display_tempfile(int fd)
+{
+    char buffer[64] = {0};
+
+    lseek(fd, 0, SEEK_SET);
+    if (read(fd, buffer, sizeof(buffer) - 1) > 0)
+        printf("Read from temp file: %s\n", buffer);
+    else
+        puts("Error: Unable to read from temp file.");
+    close(fd);
+}
+
+void turbine_remote_access(void)
+{
+    char tempFilePath[] = "Data/remote_accessXXXXXX";
+    int tempFileDesc = 0;
+
+    if (create_and_write_tempfile(tempFilePath, &tempFileDesc) == -1)
+        return;
+    puts("Enabling remote access...");
+    sleep(5);
+    read_and_display_tempfile(tempFileDesc);
 }
